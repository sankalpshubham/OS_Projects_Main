semaphore postOfficeCapacity = 10;       // keeps track of the max amount of 10 customers inside the post office. 10 threads let in by default
semaphore postalWorkerAvailable = 3;     // keeps track of one of the 3 postal worker threads are availabile. 3 threads let in default
semaphore customerReady = 0;             // keeps track of another customer entered the post office and the cusomter thread is ready to be served
semaphore finished = 0;                  // keeps track of the postal worker thread finsihing the customer assigned task
semaphore scale = 1;                     // keeps track of the scale in use by the postal worker. 1 thread let in default
semaphore postalWorkerSem[] = {(1, true), (1, true), (1, true)};     // keeps track of which one of the 3 postal worker threads are in use
semaphore thread_communication = 0;      // maintains the order of task and print statements of the customer and postal worker threads
semaphore thread_communication2 = 0;     // maintains the second half of the task and print statements of the threads

void customer() {

    wait(postOfficeCapacity)
    enter_Post_Office()
    wait(postalWorkerAvailable)
    identify_Postal_Worker_ID()
    wait(postalWorkerSem[id])
    signal(customerReady)
    wait(thread_communication)
    customer_does_assigned_task()  // customer talks to postal worker. time it needs to sleep for (print done after finishing) (need to include a scale semaphore)
    signal(thread_communication2)
    wait(finished)    
    exit_post_office()
    signal(postOfficeCapacity)

}

void postal_worker() {

    wait(customerReady)
    identify_Customer_Task&ID()
    signal(thread_communication)
    wait(thread_communication2)
    wait(scale)                    // wait on scale ONLY for mailing package & if another postal woker is using it
    do_customer_task()             // sleep for the task time assined (print done after finishing) (need to include the scale semaphore)
    signal(scale)                  // signal scale once finished using it
    signal(finished)
    signal(postalWorkerSem[id])
    signal(postalWorkerAvailable)

}

