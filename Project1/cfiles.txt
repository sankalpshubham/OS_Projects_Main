dup.c                                                                                               0000600 0110262 0000555 00000001502 12026457373 010504  0                                                                                                    ustar   ozbirn                          cs                                                                                                                                                                                                                     /* from Unix book:  "Your Unix, The Ultimate Guide", by Das */

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>


int main()
{
   int fd[2];

   if (pipe(fd) < 0)
   {
      write(STDERR_FILENO, "Pipe failed\n", 12);
      exit(1);
   }

   switch(fork())
   {
     case -1: 
      write(STDERR_FILENO, "Fork failed\n", 12);
      exit(2);

     case 0: 
      close(fd[0]);
      dup2(fd[1], STDOUT_FILENO);
      close(fd[1]);
      execlp("cat", "cat", "/etc/passwd", (char *) 0);
      write(STDERR_FILENO, "Exec failed\n", 12);
      exit(3);

     default:
      close(fd[1]);
      dup2(fd[0], STDIN_FILENO);
      close(fd[0]);
      execlp("tr", "tr", "'[a-z]'", "'[A-Z]'", (char *) 0); 
      /* execlp("head", "head", "-5", (char *) 0); */
      write(STDERR_FILENO, "Exec failed\n", 12);
      exit(4);
   }
}

                                                                                                                                                                                              fork1.c                                                                                             0000700 0110262 0000555 00000001771 12100050331 010717  0                                                                                                    ustar   ozbirn                          cs                                                                                                                                                                                                                     #include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h> 

/*
The fork() function is used to create a new process from an existing process. The new process is called the child process, 
and the existing process is called the parent. You can tell which is which by checking the return value from fork(). The parent 
gets the child's pid returned to him, but the child gets 0 returned to him. 
*/

int main()
{
   pid_t pid;
    
   switch (pid = fork())
   {
   case -1:
       /* Here pid is -1, the fork failed */
       /* Some possible reasons are that you're */
       /* out of process slots or virtual memory */
       printf("The fork failed!");
       exit(-1);
    
   case 0:
       /* pid of zero is the child */
       printf("Child:  hello!\n");
       _exit(0);
    
   default:
       /* pid greater than zero is parent */

       /* wait for child process to end */
       waitpid(-1, NULL, 0);

       printf("Parent: child's pid is %d\n",pid);
   }
}
 

       fork3.c                                                                                             0000600 0110262 0000555 00000001633 12652303711 010734  0                                                                                                    ustar   ozbirn                          cs                                                                                                                                                                                                                     #include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
 

int main()
{
   pid_t pid;
   pid_t ppid;
   pid_t chpid;

   int i;
   for (i=0; i<3; i++)
   {
      switch (pid = fork())
      {
         case -1:
	     
	    /* Here pid is -1, the fork failed */
	    /* Some possible reasons are that you're */
	    /* out of process slots or virtual memory */
	    perror("The fork failed!");
		break;
			      
	 
	 case 0:
	    /* pid of zero is the child */
	    ppid = getppid();
	    chpid = getpid();
	    printf("Hi, I'm child #%d, my pid is %d, my parent pid is %d\n", i, chpid, ppid);
	    _exit(0);
						   
/*	 default: */
	    /* pid greater than zero is parent getting the child's pid */
      }
   }

   for (i=0; i<3; i++)
   {
      waitpid(-1, NULL, 0);
   }

   ppid = getpid();
   printf("%d: Hi, I'm the parent, my pid is %d\n",i, ppid);

   printf("Done\n");
}
						       

                                                                                                     pipe1.c                                                                                             0000600 0110262 0000555 00000001144 12100051551 010711  0                                                                                                    ustar   ozbirn                          cs                                                                                                                                                                                                                     #include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
#include <sys/wait.h>

int main()
{
   int pfds[2];
   char buf[30];
   int result;

   result = pipe(pfds);
   if (result == -1)
      exit(1);

   result = fork();
   if (result == -1)
      exit(1);

   if (result == 0) 
   {
      printf("CHILD: writing to the pipe\n");
      write(pfds[1], "test", 5);
      printf("CHILD: exiting\n");
      _exit(0);
   }
   else
   {
      printf("PARENT: reading from pipe\n");
      read(pfds[0], buf, 5);
      printf("PARENT: read \"%s\"\n", buf);
      waitpid(-1, NULL, 0);
   }
}

                                                                                                                                                                                                                                                                                                                                                                                                                            pipe3.c                                                                                             0000600 0110262 0000555 00000002456 12100051773 010730  0                                                                                                    ustar   ozbirn                          cs                                                                                                                                                                                                                     /* p. 509, A Book on C, by Al Kelley and Ira Pohl */

/*Uses pipes to sum N rows concurrently.*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

#define N 3

int  add_vector(int v[]);
void error_exit(char *s);

int main()
{
   int a[N][N] = {{1, 1, 1}, {2, 2, 2}, {3, 3, 3}},
      i, row_sum, sum =0,
      pd[2];                              /* pipe descriptors */

   if (pipe(pd) == -1)                    /* create a pipe */
      error_exit("pipe() failed");

   for (i=0; i < N; i++)
   {
      if (fork() == 0)                    /* child process */
      {                    
         row_sum = add_vector(a[i]);
         if (write(pd[1], &row_sum, sizeof(int)) == -1)
            error_exit("write() failed");
         _exit(0);                       /* exit from child */
      }
   }

   for (i = 0;  i < N; ++i) 
   {
      if (read(pd[0], &row_sum, sizeof(int)) == -1)
         error_exit("read() failed");
      sum += row_sum;
   }

   for (i = 0;  i < N; ++i) 
      waitpid(-1, NULL, 0);

   printf("Sum of the array = %d\n", sum);

   return 0;
}

int add_vector(int v[])
{
   int i, vector_sum=0;

   for (i = 0; i < N;  ++i)
      vector_sum += v[i];

   return vector_sum;
}


void error_exit(char *s)
{
   fprintf(stderr,"\nERROR: %s - bye!\n", s);
      exit(1);
}

                                                                                                                                                                                                                  rw.c                                                                                                0000600 0110262 0000555 00000000342 12216163121 010327  0                                                                                                    ustar   ozbirn                          cs                                                                                                                                                                                                                     /* Ozbirn, 09/17/13
   Reads a char, increments it, and prints it.
   For use with program wr.c.
*/

#include <stdio.h>

int main()
{
   char value;

   scanf("%c", &value);
   value++;
   printf("%c", value);

   return 0;
}
                                                                                                                                                                                                                                                                                              wr.c                                                                                                0000600 0110262 0000555 00000002224 12216163027 010335  0                                                                                                    ustar   ozbirn                          cs                                                                                                                                                                                                                     /* Ozbirn, 09/17/13
   Demonstrates redirecting child's stdin and stdout.
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>


int main()
{
   char value;
   int pipe1[2];
   int pipe2[2];

   if (pipe(pipe1) < 0 || pipe(pipe2) < 0)
   {
      write(STDERR_FILENO, "Pipe failed\n", 12);
      exit(1);
   }

   switch(fork())
   {
     case -1: 
      write(STDERR_FILENO, "Fork failed\n", 12);
      exit(2);

     case 0: 
      dup2(pipe1[0], STDIN_FILENO);   /* repl stdin with pipe1[0]  */
      dup2(pipe2[1], STDOUT_FILENO);  /* repl stdout with pipe2[1] */
      close(pipe1[0]);                /* close these               */
      close(pipe1[1]);
      close(pipe2[0]);dup.c                                                                                               0000600 0110262 0000555 00000001502 12026457373 010504  0                                                                                                    ustar   ozbirn                          cs                                                                                                                                                                                                                     /* from Unix book:  "Your Unix, The Ultimate Guide", by Das */

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>


int main()
{
   int fd[2];

   if (pipe(fd) < 0)
   {
      write(STDERR_FILENO, "Pipe failed\n", 12);
      exit(1);
   }

   switch(fork())
   {
     case -1: 
      write(STDERR_FILENO, "Fork failed\n", 12);
      exit(2);

     case 0: 
      close(fd[0]);
      dup2(fd[1], STDOUT_FILENO);
      close(fd[1]);
      execlp("cat", "cat", "/etc/passwd", (char *) 0);
      write(STDERR_FILENO, "Exec failed\n", 12);
      exit(3);

     default:
      close(fd[1]);
      dup2(fd[0], STDIN_FILENO);
      close(fd[0]);
      execlp("tr", "tr", "'[a-z]'", "'[A-Z]'", (char *) 0); 
      /* execlp("head", "head", "-5", (char *) 0); */
      write(STDERR_FILENO, "Exec failed\n", 12);
      exit(4);
   }
}

                                                                                                                                                                                              fork1.c                                                                                             0000700 0110262 0000555 00000001771 12100050331 010717  0                                                                                                    ustar   ozbirn                          cs                                                                                                                                                                                                                     #include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h> 

/*
The fork() function is used to create a new process from an existing process. The new process is called the child process, and the existing process is called the parent. You can tell which is which by checking the return value from fork(). The parent gets the child's pid returned to him, but the child gets 0 returned to him. 
*/

int main()
{
   pid_t pid;
    
   switch (pid = fork())
   {
   case -1:
       /* Here pid is -1, the fork failed */
       /* Some possible reasons are that you're */
       /* out of process slots or virtual memory */
       printf("The fork failed!");
       exit(-1);
    
   case 0:
       /* pid of zero is the child */
       printf("Child:  hello!\n");
       _exit(0);
    
   default:
       /* pid greater than zero is parent */

       /* wait for child process to end */
       waitpid(-1, NULL, 0);

       printf("Parent: child's pid is %d\n",pid);
   }
}
 

       fork3.c                                                                                             0000600 0110262 0000555 00000001633 12652303711 010734  0                                                                                                    ustar   ozbirn                          cs                                                                                                                                                                                                                     #include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
 

int main()
{
   pid_t pid;
   pid_t ppid;
   pid_t chpid;

   int i;
   for (i=0; i<3; i++)
   {
      switch (pid = fork())
      {
         case -1:
	     
	    /* Here pid is -1, the fork failed */
	    /* Some possible reasons are that you're */
	    /* out of process slots or virtual memory */
	    perror("The fork failed!");
		break;
			      
	 
	 case 0:
	    /* pid of zero is the child */
	    ppid = getppid();
	    chpid = getpid();
	    printf("Hi, I'm child #%d, my pid is %d, my parent pid is %d\n", i, chpid, ppid);
	    _exit(0);
						   
/*	 default: */
	    /* pid greater than zero is parent getting the child's pid */
      }
   }

   for (i=0; i<3; i++)
   {
      waitpid(-1, NULL, 0);
   }

   ppid = getpid();
   printf("%d: Hi, I'm the parent, my pid is %d\n",i, ppid);

   printf("Done\n");
}
						       

                                                                                                     pipe1.c                                                                                             0000600 0110262 0000555 00000001144 12100051551 010711  0                                                                                                    ustar   ozbirn                          cs                                                                                                                                                                                                                     #include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
#include <sys/wait.h>

int main()
{
   int pfds[2];
   char buf[30];
   int result;

   result = pipe(pfds);
   if (result == -1)
      exit(1);

   result = fork();
   if (result == -1)
      exit(1);

   if (result == 0) 
   {
      printf("CHILD: writing to the pipe\n");
      write(pfds[1], "test", 5);
      printf("CHILD: exiting\n");
      _exit(0);
   }
   else
   {
      printf("PARENT: reading from pipe\n");
      read(pfds[0], buf, 5);
      printf("PARENT: read \"%s\"\n", buf);
      waitpid(-1, NULL, 0);
   }
}

                                                                                                                                                                                                                                                                                                                                                                                                                            pipe3.c                                                                                             0000600 0110262 0000555 00000002456 12100051773 010730  0                                                                                                    ustar   ozbirn                          cs                                                                                                                                                                                                                     /* p. 509, A Book on C, by Al Kelley and Ira Pohl */

/*Uses pipes to sum N rows concurrently.*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

#define N 3

int  add_vector(int v[]);
void error_exit(char *s);

int main()
{
   int a[N][N] = {{1, 1, 1}, {2, 2, 2}, {3, 3, 3}},
      i, row_sum, sum =0,
      pd[2];                              /* pipe descriptors */

   if (pipe(pd) == -1)                    /* create a pipe */
      error_exit("pipe() failed");

   for (i=0; i < N; i++)
   {
      if (fork() == 0)                    /* child process */
      {                    
         row_sum = add_vector(a[i]);
         if (write(pd[1], &row_sum, sizeof(int)) == -1)
            error_exit("write() failed");
         _exit(0);                       /* exit from child */
      }
   }

   for (i = 0;  i < N; ++i) 
   {
      if (read(pd[0], &row_sum, sizeof(int)) == -1)
         error_exit("read() failed");
      sum += row_sum;
   }

   for (i = 0;  i < N; ++i) 
      waitpid(-1, NULL, 0);

   printf("Sum of the array = %d\n", sum);

   return 0;
}

int add_vector(int v[])
{
   int i, vector_sum=0;

   for (i = 0; i < N;  ++i)
      vector_sum += v[i];

   return vector_sum;
}


void error_exit(char *s)
{
   fprintf(stderr,"\nERROR: %s - bye!\n", s);
      exit(1);
}

                                                                                                                                                                                                                  rw.c                                                                                                0000600 0110262 0000555 00000000342 12216163121 010327  0                                                                                                    ustar   ozbirn                          cs                                                                                                                                                                                                                     /* Ozbirn, 09/17/13
   Reads a char, increments it, and prints it.
   For use with program wr.c.
*/

#include <stdio.h>

int main()
{
   char value;

   scanf("%c", &value);
   value++;
   printf("%c", value);

   return 0;
}
                                                                                                                                                                                                                                                                                              wr.c                                                                                                0000600 0110262 0000555 00000002224 12216163027 010335  0                                                                                                    ustar   ozbirn                          cs                                                                                                                                                                                                                     /* Ozbirn, 09/17/13
   Demonstrates redirecting child's stdin and stdout.
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>


int main()
{
   char value;
   int pipe1[2];
   int pipe2[2];

   if (pipe(pipe1) < 0 || pipe(pipe2) < 0)
   {
      write(STDERR_FILENO, "Pipe failed\n", 12);
      exit(1);
   }

   switch(fork())
   {
     case -1: 
      write(STDERR_FILENO, "Fork failed\n", 12);
      exit(2);

     case 0: 
      dup2(pipe1[0], STDIN_FILENO);   /* repl stdin with pipe1[0]  */
      dup2(pipe2[1], STDOUT_FILENO);  /* repl stdout with pipe2[1] */
      close(pipe1[0]);                /* close these               */
      close(pipe1[1]);
      close(pipe2[0]);
      close(pipe2[1]);
      execlp("rw", "rw", (char *) 0); /* run rw program            */
      write(STDERR_FILENO, "Exec failed\n", 12);
      exit(3);

     default:
      value = 'A';dup.c                                                                                               0000600 0110262 0000555 00000001502 12026457373 010504  0                                                                                                    ustar   ozbirn                          cs                                                                                                                                                                                                                     /* from Unix book:  "Your Unix, The Ultimate Guide", by Das */

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>


int main()
{
   int fd[2];

   if (pipe(fd) < 0)
   {
      write(STDERR_FILENO, "Pipe failed\n", 12);
      exit(1);
   }

   switch(fork())
   {
     case -1: 
      write(STDERR_FILENO, "Fork failed\n", 12);
      exit(2);

     case 0: 
      close(fd[0]);
      dup2(fd[1], STDOUT_FILENO);
      close(fd[1]);
      execlp("cat", "cat", "/etc/passwd", (char *) 0);
      write(STDERR_FILENO, "Exec failed\n", 12);
      exit(3);

     default:
      close(fd[1]);
      dup2(fd[0], STDIN_FILENO);
      close(fd[0]);
      execlp("tr", "tr", "'[a-z]'", "'[A-Z]'", (char *) 0); 
      /* execlp("head", "head", "-5", (char *) 0); */
      write(STDERR_FILENO, "Exec failed\n", 12);
      exit(4);
   }
}

                                                                                                                                                                                              fork1.c                                                                                             0000700 0110262 0000555 00000001771 12100050331 010717  0                                                                                                    ustar   ozbirn                          cs                                                                                                                                                                                                                     #include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h> 

/*
The fork() function is used to create a new process from an existing process. The new process is called the child process, and the existing process is called the parent. You can tell which is which by checking the return value from fork(). The parent gets the child's pid returned to him, but the child gets 0 returned to him. 
*/

int main()
{
   pid_t pid;
    
   switch (pid = fork())
   {
   case -1:
       /* Here pid is -1, the fork failed */
       /* Some possible reasons are that you're */
       /* out of process slots or virtual memory */
       printf("The fork failed!");
       exit(-1);
    
   case 0:
       /* pid of zero is the child */
       printf("Child:  hello!\n");
       _exit(0);
    
   default:
       /* pid greater than zero is parent */

       /* wait for child process to end */
       waitpid(-1, NULL, 0);

       printf("Parent: child's pid is %d\n",pid);
   }
}
 

       fork3.c                                                                                             0000600 0110262 0000555 00000001633 12652303711 010734  0                                                                                                    ustar   ozbirn                          cs                                                                                                                                                                                                                     #include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
 

int main()
{
   pid_t pid;
   pid_t ppid;
   pid_t chpid;

   int i;
   for (i=0; i<3; i++)
   {
      switch (pid = fork())
      {
         case -1:
	     
	    /* Here pid is -1, the fork failed */
	    /* Some possible reasons are that you're */
	    /* out of process slots or virtual memory */
	    perror("The fork failed!");
		break;
			      
	 
	 case 0:
	    /* pid of zero is the child */
	    ppid = getppid();
	    chpid = getpid();
	    printf("Hi, I'm child #%d, my pid is %d, my parent pid is %d\n", i, chpid, ppid);
	    _exit(0);
						   
/*	 default: */
	    /* pid greater than zero is parent getting the child's pid */
      }
   }

   for (i=0; i<3; i++)
   {
      waitpid(-1, NULL, 0);
   }

   ppid = getpid();
   printf("%d: Hi, I'm the parent, my pid is %d\n",i, ppid);

   printf("Done\n");
}
						       

                                                                                                     pipe1.c                                                                                             0000600 0110262 0000555 00000001144 12100051551 010711  0                                                                                                    ustar   ozbirn                          cs                                                                                                                                                                                                                     #include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
#include <sys/wait.h>

int main()
{
   int pfds[2];
   char buf[30];
   int result;

   result = pipe(pfds);
   if (result == -1)
      exit(1);

   result = fork();
   if (result == -1)
      exit(1);

   if (result == 0) 
   {
      printf("CHILD: writing to the pipe\n");
      write(pfds[1], "test", 5);
      printf("CHILD: exiting\n");
      _exit(0);
   }
   else
   {
      printf("PARENT: reading from pipe\n");
      read(pfds[0], buf, 5);
      printf("PARENT: read \"%s\"\n", buf);
      waitpid(-1, NULL, 0);
   }
}

                                                                                                                                                                                                                                                                                                                                                                                                                            pipe3.c                                                                                             0000600 0110262 0000555 00000002456 12100051773 010730  0                                                                                                    ustar   ozbirn                          cs                                                                                                                                                                                                                     /* p. 509, A Book on C, by Al Kelley and Ira Pohl */

/*Uses pipes to sum N rows concurrently.*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

#define N 3

int  add_vector(int v[]);
void error_exit(char *s);

int main()
{
   int a[N][N] = {{1, 1, 1}, {2, 2, 2}, {3, 3, 3}},
      i, row_sum, sum =0,
      pd[2];                              /* pipe descriptors */

   if (pipe(pd) == -1)                    /* create a pipe */
      error_exit("pipe() failed");

   for (i=0; i < N; i++)
   {
      if (fork() == 0)                    /* child process */
      {                    
         row_sum = add_vector(a[i]);
         if (write(pd[1], &row_sum, sizeof(int)) == -1)
            error_exit("write() failed");
         _exit(0);                       /* exit from child */
      }
   }

   for (i = 0;  i < N; ++i) 
   {
      if (read(pd[0], &row_sum, sizeof(int)) == -1)
         error_exit("read() failed");
      sum += row_sum;
   }

   for (i = 0;  i < N; ++i) 
      waitpid(-1, NULL, 0);

   printf("Sum of the array = %d\n", sum);

   return 0;
}

int add_vector(int v[])
{
   int i, vector_sum=0;

   for (i = 0; i < N;  ++i)
      vector_sum += v[i];

   return vector_sum;
}


void error_exit(char *s)
{
   fprintf(stderr,"\nERROR: %s - bye!\n", s);
      exit(1);
}

                                                                                                                                                                                                                  rw.c                                                                                                0000600 0110262 0000555 00000000342 12216163121 010327  0                                                                                                    ustar   ozbirn                          cs                                                                                                                                                                                                                     /* Ozbirn, 09/17/13
   Reads a char, increments it, and prints it.
   For use with program wr.c.
*/

#include <stdio.h>

int main()
{
   char value;

   scanf("%c", &value);
   value++;
   printf("%c", value);

   return 0;
}
                                                                                                                                                                                                                                                                                              wr.c                                                                                                0000600 0110262 0000555 00000002224 12216163027 010335  0                                                                                                    ustar   ozbirn                          cs                                                                                                                                                                                                                     /* Ozbirn, 09/17/13
   Demonstrates redirecting child's stdin and stdout.
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>


int main()
{
   char value;
   int pipe1[2];
   int pipe2[2];

   if (pipe(pipe1) < 0 || pipe(pipe2) < 0)
   {
      write(STDERR_FILENO, "Pipe failed\n", 12);
      exit(1);
   }

   switch(fork())
   {
     case -1: 
      write(STDERR_FILENO, "Fork failed\n", 12);
      exit(2);

     case 0: 
      dup2(pipe1[0], STDIN_FILENO);   /* repl stdin with pipe1[0]  */
      dup2(pipe2[1], STDOUT_FILENO);  /* repl stdout with pipe2[1] */
      close(pipe1[0]);                /* close these               */
      close(pipe1[1]);
      close(pipe2[0]);
      close(pipe2[1]);
      execlp("rw", "rw", (char *) 0); /* run rw program            */
      write(STDERR_FILENO, "Exec failed\n", 12);
      exit(3);

     default:
      value = 'A';
      printf("Sent %c\n", value);     /* print it                  */
      write(pipe1[1], &value, 1);     /* send "A" to child         */
      read(pipe2[0], &value, 1);      /* read what child sends     */
      printf("Read %c\n", value);     /* print it                  */
   }
}


      printf("Sent %c\n", value);     /* print it                  */
      write(pipe1[1], &value, 1);     /* send "A" to child         */
      read(pipe2[0], &value, 1);      /* read what child sends     */
      printf("Read %c\n", value);     /* print it                  */
   }
}


      execlp("rw", "rw", (char *) 0); /* run rw program            */
      write(STDERR_FILENO, "Exec failed\n", 12);
      exit(3);

     default:
      value = 'A';
      printf("Sent %c\n", value);     /* print it                  */
      write(pipe1[1], &value, 1);     /* send "A" to child         */
      read(pipe2[0], &value, 1);      /* read what child sends     */
      printf("Read %c\n", value);     /* print it                  */
   }
}

